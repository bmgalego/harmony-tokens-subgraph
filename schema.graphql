#
# Provides information about an Ethereum account
#
type Account @entity {
  " Equals to: <accountAddress>"
  id: ID!

  " Account address "
  address: Bytes!

  assets: [AccountAsset!]! @derivedFrom(field: "account")

  " Token balances that this account holds "
  balances: [AccountBalance!]! @derivedFrom(field: "account")
  balancesSnapshots: [AccountBalanceSnapshot!]! @derivedFrom(field: "account")

  inventory: [AccountInventory!]! @derivedFrom(field: "account")
  inventorySnapshots: [AccountInventorySnapshot!]!
    @derivedFrom(field: "account")
}

interface AccountAsset {
  " Equals to: <accountAddress>-<tokenAddress>"
  id: ID!
  " Account address "
  account: Account!

  asset: Asset!

  " Block number in which the balance was last modified "
  block: BigInt

  " Last modified timestamp in seconds "
  modified: BigInt

  " Hash of the last transaction that modified the balance "
  transaction: Transaction
}

#
# Current token balance of a particular Ethereum account
#
type AccountBalance implements AccountAsset @entity {
  " Equals to: <accountAddress>-<tokenAddress>"
  id: ID!

  " Account address "
  account: Account!

  asset: Asset!

  " Token address "
  token: Token!

  " Current account balance "
  amount: BigDecimal!

  " Block number in which the balance was last modified "
  block: BigInt

  " Last modified timestamp in seconds "
  modified: BigInt

  " Hash of the last transaction that modified the balance "
  transaction: Transaction
}

type AccountInventory implements AccountAsset @entity {
  " Equals to: <accountAddress>-<tokenAddress>"
  id: ID!

  " Account address "
  account: Account!

  asset: Asset!

  " Token address "
  token: Nft!

  " Current account balance "
  tokenIds: [BigInt!]!

  items: [NftItem!]! @derivedFrom(field: "ownerInventory")

  " Block number in which the balance was last modified "
  block: BigInt

  " Last modified timestamp in seconds "
  modified: BigInt

  " Hash of the last transaction that modified the balance "
  transaction: Transaction
}

#
# Token balance of a particular Ethereum account in a certain timestamp. This entity is used to
# provide information about evolution of account balances
#
type AccountBalanceSnapshot @entity {
  " Equals to: <accountAddress>-<tokenAddress>-<timestamp>"
  id: ID!

  " Account address "
  account: Account!

  " Token addess "
  token: Token!

  " Account balance "
  amount: BigDecimal!

  # TODO: Add description and check if could be non-optional
  event: Event

  " Block number "
  block: BigInt!

  " Timestamp in seconds "
  timestamp: BigInt!

  " Transaction hash "
  transaction: Transaction!
}

type AccountInventorySnapshot @entity {
  " Equals to: <accountAddress>-<tokenAddress>-<timestamp>"
  id: ID!

  " Account address "
  account: Account!

  " Token addess "
  token: Nft!

  " Account balance "
  tokenIds: [BigInt!]!

  # TODO: Add description and check if could be non-optional
  event: Event

  " Block number "
  block: BigInt!

  " Timestamp in seconds "
  timestamp: BigInt!

  " Transaction hash "
  transaction: Transaction!
}

enum AssetType {
  TOKEN
  NFT
}

interface Asset {
  id: ID!
  type: AssetType!
  symbol: String!
  name: String!

  address: Bytes!

  events: [Event!]! @derivedFrom(field: "asset")
  eventCount: BigInt!
}

#
# Provides information about an ERC20 token
#
type Token implements Asset @entity {
  id: ID!

  type: AssetType!

  " Token address "
  address: Bytes!

  holders: [AccountBalance!]! @derivedFrom(field: "token")


  " Number of decimals the token uses "
  decimals: Int!

  " Human-readable name of the token "
  name: String!

  " Symbol of the token "
  symbol: String!

  " Total number of events (all types)"
  eventCount: BigInt!

  " Total number of burn events "
  burnEventCount: BigInt!

  " Total number of mint events "
  mintEventCount: BigInt!

  " Total number of transfer events "
  transferEventCount: BigInt!

  " Total token supply "
  totalSupply: BigDecimal!

  " Total token burned "
  totalBurned: BigDecimal!

  " Total token minted "
  totalMinted: BigDecimal!

  " Total token transferred "
  totalTransferred: BigDecimal!

  " List of token events "
  events: [Event!]! @derivedFrom(field: "asset")
  mints: [BurnEvent!]! @derivedFrom(field: "token")
  burns: [MintEvent!]! @derivedFrom(field: "token")
  transfers: [TransferEvent!]! @derivedFrom(field: "token")

}

enum EventType {
  TRANSFER
  BURN
  MINT
}

interface Event {
  id: ID!

  type: EventType!

  asset: Asset

  block: BigInt!
  timestamp: BigInt!
  transaction: Transaction!
}

type BurnEvent implements Event @entity {
  id: ID!

  type: EventType!

  asset: Asset

  " Token address "
  token: Token!

  " Quantity of tokens burned "
  amount: BigDecimal!

  " Transaction sender address "
  sender: Bytes!

  " Address of burner account "
  burner: Bytes!

  " Block number "
  block: BigInt!

  " Event timestamp "
  timestamp: BigInt!

  " Transaction "
  transaction: Transaction!
}

type MintEvent implements Event @entity {
  id: ID!

  type: EventType!

  asset: Asset

  " Token address "
  token: Token!

  " Quantity of tokens minted "
  amount: BigDecimal!

  " Transaction sender address "
  sender: Bytes!

  " Address of minter account "
  minter: Bytes!

  " Address of destination account "
  destination: Bytes!

  " Block number "
  block: BigInt!

  " Event timestamp "
  timestamp: BigInt!

  " Transaction "
  transaction: Transaction!
}

type TransferEvent implements Event @entity {
  id: ID!

  type: EventType!

  asset: Asset

  " Token address "
  token: Token!

  " Quantity of tokens transferred "
  amount: BigDecimal!

  " Transaction sender address "
  sender: Bytes!

  " Address of source account "
  source: Bytes!

  " Address of destination account "
  destination: Bytes!

  " Block number "
  block: BigInt!

  " Event timestamp "
  timestamp: BigInt!

  " Transaction "
  transaction: Transaction!
}

#
# Provides information about an ERC721 token
#
type Nft implements Asset @entity {
  id: ID!

  type: AssetType!

  " Token address "
  address: Bytes!

  " Human-readable name of the token "
  name: String!

  " Symbol of the token "
  symbol: String!

  # TODO: Number of token holders
  # holderCount: BigInt!

  " Total number of events (all types)"
  eventCount: BigInt!

  " Total number of burn events "
  burnEventCount: BigInt!

  " Total number of mint events "
  mintEventCount: BigInt!

  " Total number of transfer events "
  transferEventCount: BigInt!

  " Total token supply "
  totalSupply: BigInt!

  " Total token burned "
  totalBurned: BigInt!

  " Total token minted "
  totalMinted: BigInt!

  tokenIds: [BigInt!]!

  items: [NftItem!]! @derivedFrom(field: "token")

  " List of token events "
  events: [Event!]! @derivedFrom(field: "asset")
  mints: [NftBurnEvent!]! @derivedFrom(field: "token")
  burns: [NftMintEvent!]! @derivedFrom(field: "token")
  transfers: [NftTransferEvent!]! @derivedFrom(field: "token")
}

type NftItem @entity {
  id: ID!
  tokenUri: String!
  tokenId: BigInt!
  token: Nft!
  owner: Account
  ownerInventory: AccountInventory
  minter: Bytes
  burner: Bytes
  mint: NftMintEvent
  burn: NftBurnEvent
  eventCount: BigInt!
  transferEventCount: BigInt!
  transfers: [NftTransferEvent!]! @derivedFrom(field: "item")
}

type NftBurnEvent implements Event @entity {
  id: ID!

  type: EventType!

  asset: Asset

  " Token address "
  token: Nft!

  " TokenId burned "
  tokenId: BigInt!

  item: NftItem!

  " Transaction sender address "
  sender: Bytes!

  " Address of burner account "
  burner: Bytes!

  " Block number "
  block: BigInt!

  " Event timestamp "
  timestamp: BigInt!

  " Transaction "
  transaction: Transaction!
}

type NftMintEvent implements Event @entity {
  id: ID!

  type: EventType!

  asset: Asset

  " Token address "
  token: Nft!

  " TokenId minted "
  tokenId: BigInt!

  item: NftItem!

  " Transaction sender address "
  sender: Bytes!

  " Address of minter account "
  minter: Bytes!

  " Address of destination account "
  destination: Bytes!

  " Block number "
  block: BigInt!

  " Event timestamp "
  timestamp: BigInt!

  " Transaction "
  transaction: Transaction!
}

type NftTransferEvent implements Event @entity {
  id: ID!

  type: EventType!

  asset: Asset

  " Token address "
  token: Nft!

  " TokenId transferred "
  tokenId: BigInt!

  item: NftItem!

  " Transaction sender address "
  sender: Bytes!

  " Address of source account "
  source: Bytes!

  " Address of destination account "
  destination: Bytes!

  " Block number "
  block: BigInt!

  " Event timestamp "
  timestamp: BigInt!

  " Transaction "
  transaction: Transaction!
}

type Transaction @entity {
  id: ID!
  blockHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
  hash: Bytes!
  index: BigInt!
  from: Bytes!
  to: Bytes
  value: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  input: Bytes!
  events: [Event!]! @derivedFrom(field: "transaction")
}
